//pragma solidity ^0.4.24;
pragma solidity ^0.5.8;
// Define a contract 'Supplychain'

import "../artefactsaccesscontrol/ArtistRole.sol";
import "../artefactsaccesscontrol/DistributorRole.sol";
import "../artefactsaccesscontrol/ConsumerRole.sol";
import "../artefactsaccesscontrol/RetailerRole.sol";
import "../artefactscore/Ownable.sol";

contract SupplyChain is Ownable , ArtistRole, DistributorRole, ConsumerRole, RetailerRole {

  // Define 'owner'
  address payable owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Created,  // 0
    Evaluated,  // 1
    Packed,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
    }

  State constant defaultState = State.Created;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
   // address payable originalArtistID; // Metamask-Ethereum address of the Artist
    address payable originalArtistID;
    string  originalArtistName; // Artist Name
    string  originalArtistInformation;  // Artist Information
   // string  originFarmLatitude; // Farm Latitude
   // string  originFarmLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address payable retailerID; // Metamask-Ethereum address of the Retailer
    address payable consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Created(uint upc);
  event Evaluated(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].retailerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Harvested
  modifier created(uint _upc) {
    require(items[_upc].itemState == State.Created);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier evaluated(uint _upc) {
    require(items[_upc].itemState == State.Evaluated);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
        require(items[_upc].itemState == State.ForSale);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
        require(items[_upc].itemState == State.Sold);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
        require(items[_upc].itemState == State.Purchased);
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(owner);
    }

  }
 function _getItem(uint _upc) private view returns (Item memory) {
        Item memory item = items[_upc];
        return item;
    }

  // Define a function 'createItem' that allows a farmer to mark an item 'Harvested'
  function createItem(uint _upc, address payable _originalArtistID, string memory  _originalArtistName, string memory _originalArtistInformation, string  memory _productNotes) public onlyArtist
  {
    // Add the new item as part of Harvest
    //items[sku].upc= _upc;
    Item memory item = _getItem(_upc);
   // items[sku] = Item({upc: _upc, originalArtistID: _originalArtistID, originArtistName: _originArtistName, originArtistInformation: _originArtistInformation});

        item.ownerID = _originalArtistID;
        item.originalArtistID = _originalArtistID;
        item.originalArtistName = _originalArtistName;
        item.originalArtistInformation = _originalArtistInformation;
        item.productNotes = _productNotes;
        item.upc = _upc;
        item.sku = sku;
 
    // Increment sku
    sku = sku + 1;
    items[_upc] = item;
    // Emit the appropriate event
    emit Created(_upc);
    
  }

  // Define a function 'evaluatetItem' that allows a farmer to mark an item 'Processed'

function evaluateItem(uint _upc) public 
created(_upc) 
verifyCaller(_getItem(_upc).originalArtistID)
{
        // Update the appropriate fields
        Item memory item = _getItem(_upc);
        item.itemState = State.Evaluated;
        items[_upc] = item;
        // Emit the appropriate event
        emit Evaluated(_upc); 
        
    }


  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  
function packItem(uint _upc) public evaluated(_upc)
    verifyCaller(_getItem(_upc).originalArtistID)
   {
        // Update the appropriate fields
        Item memory item = _getItem(_upc);
        item.itemState = State.Packed;
        items[_upc] = item;
        // Emit the appropriate event
        emit Packed(_upc);
    }


  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
    function sellItem(uint _upc, uint _price) public
    packed(_upc)
    verifyCaller(_getItem(_upc).originalArtistID)
     {
        // Update the appropriate fields
        Item memory item = _getItem(_upc);
        item.itemState = State.ForSale;
        item.productPrice = _price;
        items[_upc] = item;
        // Emit the appropriate event
        emit ForSale(_upc);
    }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  
function buyItem(uint _upc) public payable forSale(_upc)
   
    paidEnough(_getItem(_upc).productPrice) 
    checkValue(_upc) {
        // Update the appropriate fields - ownerID, distributorID, itemState
        Item memory item = _getItem(_upc);
        item.ownerID = msg.sender;
        item.distributorID = msg.sender;
        item.itemState = State.Sold;
        // Transfer money to farmer
        item.originalArtistID.transfer(item.productPrice);
        items[_upc] = item;
        // emit the appropriate event
        emit Sold(_upc);
    }




  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold

function shipItem(uint _upc) public sold(_upc)
    verifyCaller(_getItem(_upc).distributorID)
    {
        // Update the appropriate fields
        Item memory item = _getItem(_upc);
        item.itemState = State.Shipped;
        items[_upc] = item;
        // Emit the appropriate event
        emit Shipped(_upc);
    }


  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc) public shipped(_upc) 
  {
        // Update the appropriate fields - ownerID, retailerID, itemState
        Item memory item = _getItem(_upc);
        item.ownerID = msg.sender;
        item.retailerID = msg.sender;
        item.itemState = State.Received;
        items[_upc] = item;
        // Emit the appropriate event
        emit Received(_upc);

    }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
 
function purchaseItem(uint _upc) public payable received(_upc)
  {
        // Update the appropriate fields - ownerID, consumerID, itemState
        Item memory item = _getItem(_upc);
        item.itemState = State.Purchased;
        item.ownerID = msg.sender;
        item.consumerID = msg.sender;
        items[_upc] = item;
        // Emit the appropriate event
        emit Purchased(_upc);
    }




  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originalArtistID,
  string  memory originalArtistName,
  string  memory originalArtistInformation
  //string  originFarmLatitude,
  //string  originFarmLongitude
  ) 
  {
  // Assign values to the 8 parameters
   Item memory item = _getItem(_upc);
        itemSKU = item.sku;
        itemUPC = item.upc;
        ownerID = item.ownerID;
        originalArtistID = item.originalArtistID;
        originalArtistName = item.originalArtistName;
        originalArtistInformation = item.originalArtistInformation;
  return 
  ( itemSKU,
  itemUPC,
  ownerID,
  originalArtistID,
  originalArtistName,
  originalArtistInformation
  //originFarmLatitude,
  //originFarmLongitude
  );
  }
  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  memory productNotes,
  uint    productPrice,
  uint    itemState,
  address distributorID,
  address retailerID,
  address consumerID
  ) 
  {
    // Assign values to the 9 parameters
  Item memory item = _getItem(_upc);
        itemSKU = item.sku;
        itemUPC = item.upc;
        productID = item.productID;
        productNotes = item.productNotes;
        productPrice = item.productPrice;
        itemState = uint(item.itemState);
        distributorID = item.distributorID;
        retailerID = item.retailerID;
        consumerID = item.consumerID;
    
  return 
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  distributorID,
  retailerID,
  consumerID
  );
  }
}
