
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originalArtistID = accounts[1]
    const originalArtistName = "Walaa Alharthi"
    const originalArtistInformation = "modern "
    var productID = sku + upc
    const productNotes = "painting, size 100 *100 cm"
    const productPrice = web3.utils.toWei('1', "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44



    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Artist: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function createItem() that allows an Artist to list artifact", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.createItem(upc, originalArtistID, originalArtistName, originalArtistInformation, productNotes)

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
 
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originalArtistID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originalArtistID, 'Error: Missing or Invalid originalArtistID')
        assert.equal(resultBufferOne[4], originalArtistName, 'Error: Missing or Invalid originalArtistName')
        assert.equal(resultBufferOne[5], originalArtistInformation, 'Error: Missing or Invalid originalArtistInformation')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')

    })    

    // 2nd Test
    it("Testing smart contract function evaluateItem() that allows an Artist to evaluate the artifact", async() => {
        const supplyChain = await SupplyChain.deployed()
        
     await supplyChain.evaluateItem(upc, {from: originalArtistID});
      const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State');   



    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows an Artist to pack artifact", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.packItem(upc, {from: originalArtistID});
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        assert.equal(resultBufferTwo[5], 2, "Error: Invalid item State");
        
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a Artist to sell handmade artifacts", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.sellItem(upc, productPrice, {from: originalArtistID});
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item Price');
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State');
          
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy artifacts", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addDistributor(distributorID);
        await supplyChain.buyItem(upc, {from: distributorID, value: productPrice});
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        assert.equal(resultBufferOne[2], distributorID, 'Error: Invalid item Owner');
       assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid item Owner');
       assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item Price');
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State');
        
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship artifact", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.shipItem(upc, {from: distributorID});
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        assert.equal(resultBufferOne[2], distributorID, 'Error: Invalid item Owner');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid item Owner');
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State');
              
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark artifact received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        await supplyChain.addRetailer(retailerID);
        await supplyChain.receiveItem(upc, {from: retailerID});
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferOne[2], retailerID, 'Error: Invalid item Owner');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid item Owner');
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State');
             
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase artifact", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addConsumer(consumerID);
        await supplyChain.purchaseItem(upc, {from: consumerID});
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferOne[2], consumerID, 'Error: Invalid item Owner');
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid item Owner');
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State');
        
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], consumerID, 'Error: Invalid item ownerID');
        assert.equal(resultBufferOne[3], originalArtistID, 'Error: Invalid item originalArtistID');
        assert.equal(resultBufferOne[4], originalArtistName, 'Error: Invalid item originalArtistName');
        assert.equal(resultBufferOne[5], originalArtistInformation, 'Error: Invalid item originalArtistInformation')
        
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC');
       // assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID');
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes');
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item productPrice');
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item itemState');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid item distributorID');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid item retailerID');
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid item consumerID');
        
    })

});

